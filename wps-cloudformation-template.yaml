AWSTemplateFormatVersion: 2010-09-09
Description: >-
  A template for AWS-WPS
Parameters:
  securityGroup:
    Type: String
  subnets:
    Type: CommaDelimitedList
  s3configKey:
    Type: String
    Default: 'config/'
  s3LambdaCodeFilename:
    Type: String
    Description: "Lambda code file name ex: request-handler-0.01-lambda-package.zip"
  s3LambdaCodeURL:
    Type: String
    Default: "http://imos-binary.s3-website-ap-southeast-2.amazonaws.com/jobs/aws_wps_prod/aws_wps_prod-latest.zip"
  getCapabilitiesURL:
    Type: String
    Default: 'https://raw.githubusercontent.com/aodn/aws-wps/master/wps-common/src/main/resources/config/GetCapabilities.ftl'
  gogduckURL:
    Type: String
    Default: 'https://raw.githubusercontent.com/aodn/aws-wps/master/wps-common/src/main/resources/config/DescribeProcess/GoGoDuck.xml'
  netcdfOutputURL:
    Type: String
    Default: 'https://raw.githubusercontent.com/aodn/aws-wps/master/wps-common/src/main/resources/config/NetcdfOutput.xml'
  templatesURL:
    Type: String
    Default: 'https://raw.githubusercontent.com/aodn/aws-wps/master/wps-common/src/main/resources/config/templates.xml'
  jobName:
    Type: String
    Default: 'javaduck'
  jobVCPUs:
    Type: String
    Default: '1'
  jobMemory:
    Type: String
    Default: '2000'
  maxVCPUs:
    Type: String
    Default: '4'
  geoserver:
    Type: String
  dockerImage:
    Type: String
  geoserverWpsEndpoint:
    Type: String
    Default: 'http://geoserver-wps.aodn.org.au/geoserver/wps'
  chunkSize:
    Type: String
    Default: '1024'
  workerDownloadAttempts:
    Type: String
    Default: '4'
  workerDownloadDirectory:
    Type: String
    Default: '/tmp'
  workerLocalStorageLimitBytes:
    Type: String
    Default: '104857600'
  workerPoolSize:
    Type: String
    Default: '8'
  workerRetryIntervalMs:
    Type: String
    Default: '60000'
  environment:
    Type: String
    Default: dev
    AllowedValues:
      - production
      - systest
      - sandbox
      - dev
  createPersistentBucket:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  awsRegionSes:
    Type: String
    Default: us-east-1
    AllowedValues:
      - us-east-1
      - us-west-2
      - eu-west-1
Mappings:
  EnvironmentMap:
    production:
      BucketName: "aws-wps-production"
    systest:
      BucketName: "aws-wps-systest"
    sandbox:
      BucketName: "aws-wps-sandbox"
    dev:
      BucketName: "aws-wps-dev"
  ConfigurationFileMap:
    Filename:
      outputWithoutExtension: "output"
      status: "status.xml"
      templates: "templates.xml"
      getCapabilities: "GetCapabilities.ftl"
      gogoduck: "GoGoDuck.xml"
      netcdf: "NetcdfOutput.xml"
Conditions:
  CreateEphemeralBucket: !Equals [ !Ref environment, dev ]
  CreatePersistentBucket: !And
    - !Equals [!Ref createPersistentBucket, true]
    - !Not [!Condition CreateEphemeralBucket]
Resources:
  PersistentS3Bucket:
    Type: "AWS::S3::Bucket"
    Condition: CreatePersistentBucket
    DeletionPolicy: "Retain"
    Properties:
      BucketName: !FindInMap [EnvironmentMap, !Ref environment, BucketName]
  EphemeralS3Bucket:
    Type: "AWS::S3::Bucket"
    Condition: CreateEphemeralBucket
    DeletionPolicy: "Delete"
    Properties:
      BucketName: !Join ["-", [!FindInMap [EnvironmentMap, !Ref environment, BucketName], !Ref 'AWS::StackName']]
  BatchServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: batch.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 119037ec-2cef-4c76-bbea-9e62091e725d
  SpotIamFleetRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: spotfleet.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetRole'
  IamInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref EcsInstanceRole
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 65b9b65e-442f-4006-bffb-39aa71c5708c
  EcsInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 303fb35e-a959-48ec-a564-e36ae4902115
  JobInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        -
          PolicyName: "wps-job-s3-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "s3:*"
                Resource: [
                  !Join ["", ["arn:aws:s3:::", !If [CreateEphemeralBucket, !Ref EphemeralS3Bucket, !FindInMap [EnvironmentMap, !Ref environment, BucketName]]]],
                  !Join ["", ["arn:aws:s3:::", !If [CreateEphemeralBucket, !Ref EphemeralS3Bucket, !FindInMap [EnvironmentMap, !Ref environment, BucketName]],"/*"]]
                ]
              -
                Effect: "Allow"
                Action: ["ses:SendEmail"]
                Resource: ["*"]
              -
                Effect: "Allow"
                Action: ["ses:SendRawEmail"]
                Resource: ["*"]
  JobDefinition:
    Type: 'AWS::Batch::JobDefinition'
    Properties:
      Type: container
      JobDefinitionName: !Sub 'JavaDuckSmall1-${AWS::StackName}'
      ContainerProperties:
        Image: !Ref dockerImage
        Vcpus: !Ref jobVCPUs
        Memory: !Ref jobMemory
        JobRoleArn: !Ref JobInstanceRole
        Command:
          - '-l'
          - 'Ref::layer'
          - '-s'
          - 'Ref::subset'
          - '-e'
          - 'Ref::callbackParams'
          - '-m'
          - 'Ref::result'
        Environment:
          -
            Name: "OUTPUT_S3_FILENAME"
            Value: !FindInMap [ConfigurationFileMap, "Filename", "outputWithoutExtension"]
          -
            Name: "OUTPUT_S3_BUCKET"
            Value: !If [CreateEphemeralBucket, !Ref EphemeralS3Bucket, !FindInMap [EnvironmentMap, !Ref environment, BucketName]]
          -
            Name: "STATUS_S3_BUCKET"
            Value: !If [CreateEphemeralBucket, !Ref EphemeralS3Bucket, !FindInMap [EnvironmentMap, !Ref environment, BucketName]]
          -
            Name: "STATUS_S3_FILENAME"
            Value: !FindInMap [ConfigurationFileMap, "Filename", "status"]
          -
            Name: "AWS_REGION"
            Value: !Ref "AWS::Region"
          -
            Name: "AWS_REGION_SES"
            Value: !Ref awsRegionSes
          -
            Name: "AGGREGATOR_TEMPLATE_FILE_S3_KEY"
            Value: !Join [ "", [ !Ref s3configKey,  !FindInMap [ConfigurationFileMap, "Filename", "templates"]] ]
          -
            Name: "DOWNLOAD_CONFIG_S3_KEY"
            Value: !Join [ "", [ !Ref s3configKey,  !FindInMap [ConfigurationFileMap, "Filename", "downloadConfig"]] ]
          -
            Name: "AGGREGATOR_CONFIG_S3_BUCKET"
            Value: !If [CreateEphemeralBucket, !Ref EphemeralS3Bucket, !FindInMap [EnvironmentMap, !Ref environment, BucketName]]
          -
            Name: "CHUNK_SIZE"
            Value: !Ref chunkSize
          -
            Name: "DOWNLOAD_ATTEMPTS"
            Value: !Ref workerDownloadAttempts
          -
            Name: "DOWNLOAD_DIRECTORY"
            Value: !Ref workerDownloadDirectory
          -
            Name: "LOCAL_STORAGE_LIMIT_BYTES"
            Value: !Ref workerLocalStorageLimitBytes
          -
            Name: "POOL_SIZE"
            Value: !Ref workerPoolSize
          -
            Name: "RETRY_INTERVAL_MS"
            Value: !Ref workerRetryIntervalMs
      RetryStrategy:
        Attempts: 2
    Metadata:
      'AWS::CloudFormation::Designer':
        id: f17c8aa4-8ab7-4ee1-b3a6-7a8727b8bff5
    DependsOn:  JobInstanceRole
  JobQueue:
    Type: 'AWS::Batch::JobQueue'
    Properties:
      JobQueueName: !Sub 'JavaDuckQueue1-${AWS::StackName}'
      Priority: 2
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref ComputeEnvironment
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 376a0983-1cf3-4145-bafe-96b0750be936
  ComputeEnvironment:
    Type: 'AWS::Batch::ComputeEnvironment'
    DeletionPolicy: Delete
    Properties:
      Type: MANAGED
      ComputeEnvironmentName: !Sub 'JavaDuckSpotComputeEnvironment1-${AWS::StackName}'
      ComputeResources:
        Type: SPOT
        MinvCpus: 0
        DesiredvCpus: 0
        MaxvCpus: !Ref maxVCPUs
        InstanceTypes:
          - optimal
        Subnets: !Ref subnets
        SecurityGroupIds:
          - !Ref securityGroup
        InstanceRole: !Ref IamInstanceProfile
        SpotIamFleetRole: !Ref SpotIamFleetRole
        BidPercentage: 20
      ServiceRole: !Ref BatchServiceRole
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 7a2b9b81-942a-4563-8b0a-7ed0cb6c6aad
  WPSApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Join ["",["WPS API-",!Ref  "AWS::StackName" ]]
      Description: API used for WPS requests
      FailOnWarnings: true
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt LambdaRequestHandler.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join ["", ["arn:aws:execute-api:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":", !Ref WPSApi, "/*"]]
  WPSApiStage:
    DependsOn:
      - ApiGatewayAccount
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiDeployment
      MethodSettings:
        -
          DataTraceEnabled: true
          HttpMethod: GET
          LoggingLevel: INFO
          ResourcePath: /*
      RestApiId: !Ref WPSApi
      StageName: LATEST
  ApiGatewayCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        -
          PolicyName: ApiGatewayLogsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:DescribeLogGroups'
                - 'logs:DescribeLogStreams'
                - 'logs:PutLogEvents'
                - 'logs:GetLogEvents'
                - 'logs:FilterLogEvent'
              Resource: '*'
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchLogsRole.Arn
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - WPSRequest
    Properties:
      RestApiId: !Ref WPSApi
      StageName: DummyStage
  WPSResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref WPSApi
      ParentId: !GetAtt WPSApi.RootResourceId
      PathPart: wps
  WPSRequest:
    DependsOn: LambdaPermission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: ANY
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join ["",
          ["arn:aws:apigateway:", !Ref "AWS::Region", ":lambda:path/2015-03-31/functions/", !GetAtt LambdaRequestHandler.Arn, "/invocations"]
        ]
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref WPSResource
      RestApiId: !Ref WPSApi
      MethodResponses:
        - StatusCode: 200
  LambdaRequestHandler:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Make a wps request
      FunctionName: !Sub 'wps-request-handler-${AWS::StackName}'
      Handler: 'au.org.aodn.aws.wps.lambda.WpsLambdaRequestHandler'
      MemorySize: 512
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: java8
      Timeout: 60
      Code:
        S3Bucket: !If [CreateEphemeralBucket, !Ref EphemeralS3Bucket, !FindInMap [EnvironmentMap, !Ref environment, BucketName]]
        S3Key: !Join [ "", [ !Ref s3configKey,  !Ref s3LambdaCodeFilename] ]
      Environment:
        Variables:
          AWS_BATCH_JOB_NAME: !Ref jobName
          AWS_BATCH_JOB_QUEUE_NAME: !Ref JobQueue
          AWS_BATCH_JOB_DEFINITION_NAME: !Select [1, !Split ["/", !Ref JobDefinition]]
          STATUS_S3_BUCKET: !If [CreateEphemeralBucket, !Ref EphemeralS3Bucket, !FindInMap [EnvironmentMap, !Ref environment, BucketName]]
          STATUS_S3_FILENAME: !FindInMap [ConfigurationFileMap, "Filename", "status"]
          GET_CAPABILITIES_TEMPLATE_S3_BUCKET: !If [CreateEphemeralBucket, !Ref EphemeralS3Bucket, !FindInMap [EnvironmentMap, !Ref environment, BucketName]]
          GET_CAPABILITIES_TEMPLATE_S3_KEY: !Join [ "", [ !Ref s3configKey, !FindInMap [ConfigurationFileMap, "Filename", "getCapabilities"] ] ]
          DESCRIBE_PROCESS_S3_BUCKET: !If [CreateEphemeralBucket, !Ref EphemeralS3Bucket, !FindInMap [EnvironmentMap, !Ref environment, BucketName]]
          DESCRIBE_PROCESS_S3_KEY_PREFIX: !Ref s3configKey
          GEOSERVER_WPS_ENDPOINT_URL: !Ref geoserverWpsEndpoint
          GEOSERVER_CATALOGUE_ENDPOINT_URL: !Ref geoserver
    DependsOn: S3PutConfigurationFiles
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 2f9d630f-4908-418a-9455-e9b730d0c673
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSBatchFullAccess'
      Policies:
        - PolicyName: PublishVersion
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:PublishVersion'
                Resource: '*'
        - PolicyName: S3Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: "Allow"
                Action: "s3:*"
                Resource: [
                  !Join ["", ["arn:aws:s3:::", !If [CreateEphemeralBucket, !Ref EphemeralS3Bucket, !FindInMap [EnvironmentMap, !Ref environment, BucketName]]]],
                  !Join ["", ["arn:aws:s3:::", !If [CreateEphemeralBucket, !Ref EphemeralS3Bucket, !FindInMap [EnvironmentMap, !Ref environment, BucketName]],"/*"]]
                ]
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 5a6cf0c9-ebd3-41f0-8b4c-009af363b85b
  S3PutObjectFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: PublishVersion
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:PublishVersion'
                Resource: '*'
        - PolicyName: S3Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: "Allow"
                Action: "s3:*"
                Resource: [
                  !Join ["", ["arn:aws:s3:::", !If [CreateEphemeralBucket, !Ref EphemeralS3Bucket, !FindInMap [EnvironmentMap, !Ref environment, BucketName]]]],
                  !Join ["", ["arn:aws:s3:::", !If [CreateEphemeralBucket, !Ref EphemeralS3Bucket, !FindInMap [EnvironmentMap, !Ref environment, BucketName]], "/*"]]
                ]
  S3PutObjectFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: !Join ["\n", [
        "import json",
        "import os",
        "import boto3",
        "from urllib2 import urlopen, Request",
        "from botocore.vendored import requests",
        "",
        "SUCCESS = 'SUCCESS'",
        "FAILED = 'FAILED'",
        "responseData = {'Data': 'OK'}",
        "",
        "s3c = boto3.client('s3')",
        "target_bucket = os.getenv('BUCKET')",
        "config_location = os.getenv('CONFIG_LOCATION')",
        "filename_suffix = os.getenv('FILENAME_SUFFIX')",
        "http_prefix = os.getenv('HTTP_FILE_PREFIX') ",
        "",
        "",
        "def handler(event, context):",
        "    try:",
        "        for env_var in os.environ:",
        "            env_var_value = os.getenv(env_var)",
        "            print('Environment Variable {} : {}'.format(env_var, env_var_value))",
        "",
        "        for env_var in os.environ:",
        "            env_var_value = os.getenv(env_var)",
        "            filename = os.getenv('{}_{}'.format(env_var, filename_suffix))",
        "            if env_var.startswith(http_prefix) and not env_var.endswith(filename_suffix) and env_var_value != http_prefix:",
        "                put(filename, env_var_value)",
        "",
        "        return send(event, context, SUCCESS, responseData, 'CustomResourcePhysicalID')",
        "    except Exception as e:",
        "        print(e)",
        "        return send(event, context, FAILED, responseData, 'CustomResourcePhysicalID')",
        "",
        "",
        "def put(filename, url):",
        "    print('Downloading url : {}'.format(url))",
        "    request = Request(url)",
        "    response = urlopen(request)",
        "",
        "    file_contents = response.read()",
        "    s3c.put_object(Bucket=target_bucket, Key='{}{}'.format(config_location, filename), Body=file_contents)",
        "    print('Downloaded url : {}'.format(url))",
        "",
        "",
        "def send(event, context, responseStatus, responseData, physicalResourceId):",
        "    responseUrl = event['ResponseURL']",
        "",
        "    responseBody = {}",
        "    responseBody['Status'] = responseStatus",
        "    responseBody['Reason'] = 'See the details in CloudWatch Log Stream: ' + context.log_stream_name",
        "    responseBody['PhysicalResourceId'] = physicalResourceId",
        "    responseBody['StackId'] = event['StackId']",
        "    responseBody['RequestId'] = event['RequestId']",
        "    responseBody['LogicalResourceId'] = event['LogicalResourceId']",
        "    responseBody['Data'] = responseData",
        "",
        "    json_responseBody = json.dumps(responseBody)",
        "",
        "    print('Response body:' + json_responseBody)",
        "",
        "    headers = {",
        "        'content-type' : '',",
        "        'content-length' : str(len(json_responseBody))",
        "    }",
        "",
        "    try:",
        "        response = requests.put(responseUrl,",
        "                                data=json_responseBody,",
        "                                headers=headers)",
        "        print('Status code: ' + response.reason)",
        "    except Exception as e:",
        "        print('send(..) failed executing requests.put(..): ' + str(e))",
        ""
        ]]
      Description: "Used to put objects into S3."
      FunctionName: !Sub 'S3PutObject-${AWS::StackName}'
      Handler: 'index.handler'
      Role: !GetAtt S3PutObjectFunctionRole.Arn
      Runtime: python2.7
      Timeout: 60
      Environment:
        Variables:
          BUCKET: !If [CreateEphemeralBucket, !Ref EphemeralS3Bucket, !FindInMap [EnvironmentMap, !Ref environment, BucketName]]
          CONFIG_LOCATION: !Ref s3configKey
          FILENAME_SUFFIX: 'FILENAME'
          HTTP_FILE_PREFIX: 'HTTP_FILE'
          HTTP_FILE_GET_CAPABILITIES: !Ref getCapabilitiesURL
          HTTP_FILE_GET_CAPABILITIES_FILENAME: !FindInMap [ConfigurationFileMap, "Filename", "getCapabilities"]
          HTTP_FILE_GOGODUCK: !Ref gogduckURL
          HTTP_FILE_GOGODUCK_FILENAME: !FindInMap [ConfigurationFileMap, "Filename", "gogoduck"]
          HTTP_FILE_NETCDF_OUTPUT: !Ref netcdfOutputURL
          HTTP_FILE_NETCDF_OUTPUT_FILENAME: !FindInMap [ConfigurationFileMap, "Filename", "netcdf"]
          HTTP_FILE_TEMPLATES: !Ref templatesURL
          HTTP_FILE_TEMPLATES_FILENAME: !FindInMap [ConfigurationFileMap, "Filename", "templates"]
          HTTP_FILE_WPS_REQUEST_HANDLER: !Ref s3LambdaCodeURL
          HTTP_FILE_WPS_REQUEST_HANDLER_FILENAME: !Ref s3LambdaCodeFilename
  S3PutConfigurationFiles:
    Type: "Custom::S3PutObject"
    Properties:
      ServiceToken: !GetAtt S3PutObjectFunction.Arn
Outputs:
  ComputeEnvironmentArn:
    Value: !Ref ComputeEnvironment
  JobQueueArn:
    Value: !Ref JobQueue
  JobDefinitionArn:
    Value: !Ref JobDefinition
Metadata:
  'AWS::CloudFormation::Designer':
    f17c8aa4-8ab7-4ee1-b3a6-7a8727b8bff5:
      size:
        width: 60
        height: 60
      position:
        x: 60
        'y': 660
      z: 1
      embeds: []
    303fb35e-a959-48ec-a564-e36ae4902115:
      size:
        width: 60
        height: 60
      position:
        x: 180
        'y': 660
      z: 1
      embeds: []
    65b9b65e-442f-4006-bffb-39aa71c5708c:
      size:
        width: 60
        height: 60
      position:
        x: 300
        'y': 660
      z: 1
      embeds: []
      isassociatedwith:
        - 303fb35e-a959-48ec-a564-e36ae4902115
    119037ec-2cef-4c76-bbea-9e62091e725d:
      size:
        width: 60
        height: 60
      position:
        x: 420
        'y': 660
      z: 1
      embeds: []
    d3ba16c5-0aeb-466c-8178-faca02f99c1a:
      size:
        width: 60
        height: 60
      position:
        x: 540
        'y': 390
      z: 1
      embeds: []
    4bc5138a-265b-4dfa-9d1e-9f9efad6ef93:
      size:
        width: 600
        height: 510
      position:
        x: 60
        'y': 90
      z: 1
      embeds:
        - ec8b2cb0-b28c-4d69-bf68-486d10499b6f
    ec8b2cb0-b28c-4d69-bf68-486d10499b6f:
      size:
        width: 60
        height: 60
      position:
        x: 390
        'y': 360
      z: 2
      parent: 4bc5138a-265b-4dfa-9d1e-9f9efad6ef93
      embeds: []
    7a2b9b81-942a-4563-8b0a-7ed0cb6c6aad:
      size:
        width: 60
        height: 60
      position:
        x: 660
        'y': 660
      z: 1
      embeds: []
      isrelatedto:
        - a41bc925-27c0-4347-893d-3de5628f24f5
        - ec8b2cb0-b28c-4d69-bf68-486d10499b6f
        - 65b9b65e-442f-4006-bffb-39aa71c5708c
        - 119037ec-2cef-4c76-bbea-9e62091e725d
    376a0983-1cf3-4145-bafe-96b0750be936:
      size:
        width: 60
        height: 60
      position:
        x: 660
        'y': 570
      z: 1
      embeds: []
      isrelatedto:
        - 7a2b9b81-942a-4563-8b0a-7ed0cb6c6aad
    49a7ceae-b82e-44c7-851b-3a0590c37a44:
      source:
        id: d3ba16c5-0aeb-466c-8178-faca02f99c1a
      target:
        id: 4bc5138a-265b-4dfa-9d1e-9f9efad6ef93
    2f9d630f-4908-418a-9455-e9b730d0c673:
      size:
        width: 60
        height: 60
      position:
        x: 330
        'y': 390
      z: 1
      embeds: []
      isrelatedto:
        - 5a6cf0c9-ebd3-41f0-8b4c-009af363b85b
    5a6cf0c9-ebd3-41f0-8b4c-009af363b85b:
      size:
        width: 60
        height: 60
      position:
        x: 320
        'y': 260
      z: 1
      embeds: []
