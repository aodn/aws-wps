AWSTemplateFormatVersion: 2010-09-09
Description: >-
  A template for AWS-WPS
Parameters:
  version:
    Type: String
    Description: Build/Code version
    Default: '0'
  s3configKey:
    Type: String
    Default: config/
  s3jobKey:
    Type: String
    Default: jobs/
  requestHandlerCodeURL:
    Type: String
  requestHandlerApiPath:
    Type: String
    Default: wps
  jobStatusApiPath:
    Type: String
    Default: jobStatus
  wpsApiStage:
    Type: String
    Default: LATEST
  customAmiId:
    Type: String
    Description: Custom AMI image id to use when creating the compute environment (optional)
    Default: ''
  jobStatusCodeURL:
    Type: String
  templatesURL:
    Type: String
  sumoEndpoint:
    Type: String
    Default: ''
  bootstrapCssURL:
    Type: String
  aodnCssURL:
    Type: String
  jobName:
    Type: String
    Default: javaduck
  jobExpirationInDays:
    Type: Number
    Default: 7
  maxVCPUs:
    Type: Number
    Default: 4
  geoserver:
    Type: String
    Description: Geoserver from which to source files to aggregate
  dockerImage:
    Type: String
  workerDownloadAttempts:
    Type: Number
    Default: 4
  workerLocalStorageLimitBytes:
    Type: Number
    Default: 104857600
  workerPoolSize:
    Type: Number
    Default: 8
  workerRetryIntervalMs:
    Type: Number
    Default: 60000
  wpsDomainName:
    Type: String
    Default: ''
    Description: The WPS API Gateway endpoint's domain name prefix (excluding the domain)
  geonetworkCatalogueURL:
    Type: String
    Default: https://catalogue-imos.aodn.org.au/geonetwork
  geonetworkLayerSearchField:
    Type: String
    Default: layer
  environment:
    Type: String
    Default: dev
    AllowedValues:
      - production
      - systest
      - sandbox
      - dev
  awsRegionSes:
    Type: String
    Default: us-east-1
    AllowedValues:
      - us-east-1
      - us-west-2
      - eu-west-1
Mappings:
  Constants:
    ConstantMap:
      ContainerWorkingDir: /mnt/work
      CloudfrontHostedZoneId: Z2FDTNDATAQYW2
  AccountConstants:
    '615645230945':  # non-production
      CertificateArn: arn:aws:acm:us-east-1:615645230945:certificate/06e50848-29a7-47c3-8a3f-c3212b608a8d
      DomainSuffix: dev.aodn.org.au
      HostedZoneId: Z3JIUIKOQNPOWH
      HostedZoneName: dev.aodn.org.au.
    '104044260116':  # production
      CertificateArn: arn:aws:acm:us-east-1:104044260116:certificate/58773098-aaa7-42b5-bc58-8ba2a938f951
      DomainSuffix: aodn.org.au
      HostedZoneId: ZYU7JVFK6NXWM
      HostedZoneName: aodn.org.au.
  EnvironmentMap:
    production:
      BucketName: aws-wps-production
      AccountId: 104044260116
    systest:
      BucketName: aws-wps-systest
    sandbox:
      BucketName: aws-wps-sandbox
    dev:
      BucketName: aws-wps-dev
  ConfigurationFileMap:
    Filename:
      outputWithoutExtension: output
      status: status.xml
      request: request.xml
      templates: templates.xml
      bootstrapCss: bootstrap.min.css
      jobStatusCss: AODNStatusPage.css
  production:
    ap-southeast-2:
      vpc: vpc-7302ee16
      subnets:
        - subnet-7976213f
        - subnet-54b3aa20
        - subnet-d722d0b2
    eu-central-1:
      vpc: vpc-16c5247f
      subnets:
        - subnet-9e0003e6
        - subnet-f82bcb91
        - subnet-5086a51a
  systest:
    ap-southeast-2:
      vpc: vpc-7302ee16
      subnets:
        - subnet-7976213f
        - subnet-54b3aa20
        - subnet-d722d0b2
  sandbox:
    ap-southeast-2:
      vpc: vpc-7302ee16
      subnets:
        - subnet-7976213f
        - subnet-54b3aa20
        - subnet-d722d0b2
  dev:
    ap-southeast-2:
      vpc: vpc-5e0e3a3a
      subnets:
        - subnet-4d471e14
        - subnet-eab65ea3
        - subnet-19956d7e
Conditions:
  CreateEphemeralBucket: !And
    - !Equals [!Ref environment, dev]
    - !Not [!Equals [!Ref 'AWS::AccountId', !FindInMap [EnvironmentMap, production, AccountId]]]
  ConfigureSumoLogic: !Not [!Equals [ '', !Ref sumoEndpoint]]
  CreateWpsApiGatewayDomainName: !Not [!Equals [!Ref wpsDomainName, '']]
  UseCustomAmi: !Not [!Equals [!Ref customAmiId, '']]
Resources:
  EphemeralS3Bucket:
    Type: AWS::S3::Bucket
    Condition: CreateEphemeralBucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Join ['-', [!FindInMap [EnvironmentMap, !Ref environment, BucketName], !Ref 'AWS::StackName']]
      LifecycleConfiguration:
        Rules:
          - Id: JobExpirationInDays
            Prefix: !Ref s3jobKey
            Status: Enabled
            ExpirationInDays: !Ref jobExpirationInDays
      Tags:
        - Key: EphemeralBucket
          Value: true
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !If [CreateEphemeralBucket, !Ref EphemeralS3Bucket, !FindInMap [EnvironmentMap, !Ref environment, BucketName]]
      PolicyDocument:
        Statement:
          -
            Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub
              - 'arn:aws:s3:::${BucketName}/${s3jobKey}*'
              - { BucketName: !If [CreateEphemeralBucket, !Ref EphemeralS3Bucket, !FindInMap [EnvironmentMap, !Ref environment, BucketName]] }
            Principal: '*'
  BatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: batch.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole
  SpotIamFleetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: spotfleet.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetRole
  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EcsInstanceRole
  EcsInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
  JobInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: wps-job-s3-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                  - s3:PutObject
                Resource:
                  - !Sub
                    - 'arn:aws:s3:::${BucketName}'
                    - { BucketName: !If [CreateEphemeralBucket, !Ref EphemeralS3Bucket, !FindInMap [EnvironmentMap, !Ref environment, BucketName]] }
                  - !Sub
                    - 'arn:aws:s3:::${BucketName}/*'
                    - { BucketName: !If [CreateEphemeralBucket, !Ref EphemeralS3Bucket, !FindInMap [EnvironmentMap, !Ref environment, BucketName]] }
              -
                Effect: Allow
                Action:
                  - ses:SendEmail
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - ses:SendRawEmail
                Resource: '*'
  JobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      JobDefinitionName: !Sub 'JavaDuckSmall1-${AWS::StackName}'
      ContainerProperties:
        Image: !Ref dockerImage
        Vcpus: 2
        Memory: 2000
        JobRoleArn: !Ref JobInstanceRole
        Volumes:
          -
            Name: work
        Environment:
          -
            Name: JAVA_TOOL_OPTIONS
            Value: -Xmx512m
          -
            Name: OUTPUT_S3_FILENAME
            Value: !FindInMap [ConfigurationFileMap, Filename, outputWithoutExtension]
          -
            Name: OUTPUT_S3_BUCKET
            Value: !If [CreateEphemeralBucket, !Ref EphemeralS3Bucket, !FindInMap [ EnvironmentMap, !Ref environment, BucketName]]
          -
            Name: STATUS_S3_BUCKET
            Value: !If [CreateEphemeralBucket, !Ref EphemeralS3Bucket, !FindInMap [EnvironmentMap, !Ref environment, BucketName]]
          -
            Name: STATUS_S3_FILENAME
            Value: !FindInMap [ConfigurationFileMap, Filename, status]
          -
            Name: REQUEST_S3_FILENAME
            Value: !FindInMap [ConfigurationFileMap, Filename, request]
          -
            Name: AWS_REGION
            Value: !Ref 'AWS::Region'
          -
            Name: AWS_REGION_SES
            Value: !Ref awsRegionSes
          -
            Name: AGGREGATOR_TEMPLATE_FILE_S3_KEY
            Value: !Sub
              - '${s3configKey}${ConfigFile}'
              - { ConfigFile: !FindInMap [ConfigurationFileMap, Filename, templates] }
          -
            Name: AGGREGATOR_CONFIG_S3_BUCKET
            Value: !If [CreateEphemeralBucket, !Ref EphemeralS3Bucket, !FindInMap [EnvironmentMap, !Ref environment, BucketName]]
          -
            Name: GEOSERVER_CATALOGUE_ENDPOINT_URL
            Value: !Ref geoserver
          -
            Name: CHUNK_SIZE
            Value: 100000000
          -
            Name: DOWNLOAD_ATTEMPTS
            Value: !Ref workerDownloadAttempts
          -
            Name: WORKING_DIR
            Value: !FindInMap [Constants, ConstantMap, ContainerWorkingDir]
          -
            Name: LOCAL_STORAGE_LIMIT_BYTES
            Value: !Ref workerLocalStorageLimitBytes
          -
            Name: POOL_SIZE
            Value: !Ref workerPoolSize
          -
            Name: RETRY_INTERVAL_MS
            Value: !Ref workerRetryIntervalMs
          -
            Name: GEONETWORK_CATALOGUE_URL
            Value: !Ref geonetworkCatalogueURL
          -
            Name: GEONETWORK_LAYER_SEARCH_FIELD
            Value: !Ref geonetworkLayerSearchField
          -
            Name: JOB_EXPIRATION_IN_DAYS
            Value: !Ref jobExpirationInDays
          -
            Name: JOB_S3_KEY
            Value: !Ref s3jobKey
          -
            Name: STATUS_SERVICE_ENDPOINT_URL
            Value: !If [
              CreateWpsApiGatewayDomainName,
              !Sub 'https://${WpsRoute53RecordSet}/${requestHandlerApiPath}/${jobStatusApiPath}',
              !Sub 'https://${WPSRestApi}.execute-api.${AWS::Region}.amazonaws.com/${wpsApiStage}/${requestHandlerApiPath}/${jobStatusApiPath}'
            ]
          -
            Name: AWS_WPS_ENDPOINT_URL
            Value: !If [
              CreateWpsApiGatewayDomainName,
              !Sub 'https://${WpsRoute53RecordSet}/${requestHandlerApiPath}',
              !Sub 'https://${WPSRestApi}.execute-api.${AWS::Region}.amazonaws.com/${wpsApiStage}/${requestHandlerApiPath}'
            ]
        MountPoints:
          -
            SourceVolume: work
            ContainerPath: !FindInMap [Constants, ConstantMap, ContainerWorkingDir]
            ReadOnly: false
      RetryStrategy:
        Attempts: 2
    DependsOn:  JobInstanceRole
  JobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: !Sub 'JavaDuckQueue1-${AWS::StackName}'
      Priority: 2
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref ComputeEnvironment
  ComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    DeletionPolicy: Delete
    Properties:
      Type: MANAGED
      ComputeEnvironmentName: !Sub 'JavaDuckSpotComputeEnvironment-v1-${AWS::StackName}'
      ComputeResources:
        Type: SPOT
        MinvCpus: 0
        DesiredvCpus: 0
        MaxvCpus: !Ref maxVCPUs
        InstanceTypes:
          - c3.large
          - c4.large
          - m3.large
          - m4.large
          - r4.large
          - r3.large
        ImageId: !If [UseCustomAmi, !Ref customAmiId, !Ref 'AWS::NoValue']
        Subnets: !FindInMap [!Ref environment, !Ref 'AWS::Region', subnets]
        SecurityGroupIds:
          - !Ref ComputeEnvironmentInstanceSecurityGroup
        InstanceRole: !Ref IamInstanceProfile
        SpotIamFleetRole: !Ref SpotIamFleetRole
        BidPercentage: 100
      ServiceRole: !Ref BatchServiceRole
  ComputeEnvironmentInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !FindInMap [!Ref environment, !Ref 'AWS::Region', vpc]
      SecurityGroupIngress:
      - IpProtocol: '-1'
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: '-1'
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: 0.0.0.0/0
  WPSRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'WPS API-${AWS::StackName}'
      Description: API used for WPS requests
      FailOnWarnings: true
  WpsApiGatewayStage:
    DependsOn:
      - WpsApiGatewayAccount
      - WPSRestApi
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref WpsApiGatewayDeployment
      MethodSettings:
          -
            DataTraceEnabled: true
            HttpMethod: '*'
            LoggingLevel: INFO
            ResourcePath: /*
      RestApiId: !Ref WPSRestApi
      StageName: !Ref wpsApiStage
  WpsApiGatewayDomainName:
    Type: AWS::ApiGateway::DomainName
    Condition: CreateWpsApiGatewayDomainName
    Properties:
      CertificateArn: !FindInMap [AccountConstants, !Ref 'AWS::AccountId', CertificateArn]
      DomainName: !Join ['.', [!Ref wpsDomainName, !FindInMap [AccountConstants, !Ref 'AWS::AccountId', DomainSuffix]]]
  WpsDomainToAPIMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Condition: CreateWpsApiGatewayDomainName
    DependsOn:
      - WpsApiGatewayStage
      - WpsRoute53RecordSet
    Properties:
      DomainName: !Ref WpsApiGatewayDomainName
      RestApiId: !Ref WPSRestApi
      Stage: !Ref wpsApiStage
  WpsRoute53RecordSet:
    Type: AWS::Route53::RecordSet
    Condition: CreateWpsApiGatewayDomainName
    Properties:
      AliasTarget:
        DNSName: !GetAtt WpsApiGatewayDomainName.DistributionDomainName
        HostedZoneId: !FindInMap [Constants, ConstantMap, CloudfrontHostedZoneId]
      HostedZoneName: !FindInMap [AccountConstants, !Ref 'AWS::AccountId', HostedZoneName]
      Name: !Join ['.', [!Ref wpsDomainName, !FindInMap [AccountConstants, !Ref 'AWS::AccountId', DomainSuffix]]]
      Type: 'A'
  WpsApiGatewayCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: ApiGatewayLogsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:DescribeLogGroups
                - logs:DescribeLogStreams
                - logs:PutLogEvents
                - logs:GetLogEvents
                - logs:FilterLogEvents
              Resource: '*'
  WpsApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt WpsApiGatewayCloudWatchLogsRole.Arn
  WpsApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - RequestHandlerApiGatewayRequest
      - JobStatusApiGatewayRequest
    Properties:
      RestApiId: !Ref WPSRestApi
  RequestHandlerApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref WPSRestApi
      ParentId: !GetAtt WPSRestApi.RootResourceId
      PathPart: !Ref requestHandlerApiPath
  RequestHandlerApiGatewayRequest:
    DependsOn: RequestHandlerLambdaPermission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FunctionArn}/invocations'
          - { FunctionArn: !GetAtt RequestHandlerLambdaFunction.Arn }
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref RequestHandlerApiGatewayResource
      RestApiId: !Ref WPSRestApi
      MethodResponses:
        - StatusCode: 200
  RequestHandlerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt RequestHandlerLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WPSRestApi}/*'
  RequestHandlerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Make a wps request
      FunctionName: !Sub 'wps-request-handler-${AWS::StackName}'
      Handler: au.org.aodn.aws.wps.lambda.WpsLambdaRequestHandler
      MemorySize: 1536
      Role: !GetAtt RequestHandlerLambdaExecutionRole.Arn
      Runtime: java8
      Timeout: 60
      Code: ./request-handler/target/request-handler-lambda-package.zip
      Environment:
        Variables:
          AWS_BATCH_JOB_NAME: !Ref jobName
          AWS_BATCH_JOB_QUEUE_NAME: !Ref JobQueue
          AWS_BATCH_JOB_DEFINITION_NAME: !Select [1, !Split ['/', !Ref JobDefinition]]
          STATUS_S3_BUCKET: !If [CreateEphemeralBucket, !Ref EphemeralS3Bucket, !FindInMap [EnvironmentMap, !Ref environment, BucketName]]
          STATUS_S3_FILENAME: !FindInMap [ConfigurationFileMap, Filename, status]
          REQUEST_S3_FILENAME: !FindInMap [ConfigurationFileMap, Filename, request]
          AWS_WPS_ENDPOINT_URL: !If [
            CreateWpsApiGatewayDomainName,
            !Sub 'https://${WpsRoute53RecordSet}/${requestHandlerApiPath}',
            !Sub 'https://${WPSRestApi}.execute-api.${AWS::Region}.amazonaws.com/${wpsApiStage}/${requestHandlerApiPath}'
          ]
          AWS_REGION_SES: !Ref awsRegionSes
          JOB_S3_KEY: !Ref s3jobKey
          STATUS_SERVICE_ENDPOINT_URL: !If [
            CreateWpsApiGatewayDomainName,
            !Sub 'https://${WpsRoute53RecordSet}/${requestHandlerApiPath}/${jobStatusApiPath}',
            !Sub 'https://${WPSRestApi}.execute-api.${AWS::Region}.amazonaws.com/${wpsApiStage}/${requestHandlerApiPath}/${jobStatusApiPath}'
          ]
    DependsOn: S3PutConfigurationFiles
  RequestHandlerLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSBatchFullAccess
      Policies:
        - PolicyName: PublishVersion
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:PublishVersion
                Resource: '*'
        - PolicyName: S3Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub
                    - 'arn:aws:s3:::${BucketName}'
                    - { BucketName: !If [CreateEphemeralBucket, !Ref EphemeralS3Bucket, !FindInMap [EnvironmentMap, !Ref environment, BucketName]] }
                  - !Sub
                    - 'arn:aws:s3:::${BucketName}/*'
                    - { BucketName: !If [CreateEphemeralBucket, !Ref EphemeralS3Bucket, !FindInMap [EnvironmentMap, !Ref environment, BucketName]] }
              -
                Effect: Allow
                Action:
                  - ses:SendEmail
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - ses:SendRawEmail
                Resource: '*'
  JobStatusApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref WPSRestApi
      ParentId: !Ref RequestHandlerApiGatewayResource
      PathPart: !Ref jobStatusApiPath
  JobStatusApiGatewayRequest:
    DependsOn:
      - JobStatusLambdaPermission
      - RequestHandlerApiGatewayRequest
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FunctionArn}/invocations'
          - { FunctionArn: !GetAtt JobStatusLambdaFunction.Arn }
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref JobStatusApiGatewayResource
      RestApiId: !Ref WPSRestApi
      MethodResponses:
        - StatusCode: 200
  JobStatusLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt JobStatusLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WPSRestApi}/*'
  JobStatusLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Return wps job status
      FunctionName: !Sub 'wps-job-status-${AWS::StackName}'
      Handler: au.org.aodn.aws.wps.lambda.JobStatusServiceRequestHandler
      MemorySize: 1536
      Role: !GetAtt JobStatusLambdaExecutionRole.Arn
      Runtime: java8
      Timeout: 60
      Code: ./job-status-service/target/job-status-service-lambda-package.zip
      Environment:
        Variables:
          STATUS_S3_BUCKET: !If [CreateEphemeralBucket, !Ref EphemeralS3Bucket, !FindInMap [EnvironmentMap, !Ref environment, BucketName]]
          STATUS_S3_FILENAME: !FindInMap [ConfigurationFileMap, Filename, status]
          REQUEST_S3_FILENAME: !FindInMap [ConfigurationFileMap, Filename, request]
          JOB_S3_KEY: !Ref s3jobKey
          CONFIG_S3_KEY: !Ref s3configKey
          BOOTSTRAP_CSS_FILENAME: !FindInMap [ConfigurationFileMap, Filename, bootstrapCss]
          AODN_CSS_FILENAME: !FindInMap [ConfigurationFileMap, Filename, jobStatusCss]
          AWS_BATCH_JOB_QUEUE_NAME: !Ref JobQueue
          AWS_BATCH_LOG_GROUP_NAME: /aws/batch/job
          STATUS_SERVICE_ENDPOINT_URL: !If [
            CreateWpsApiGatewayDomainName,
            !Sub 'https://${WpsRoute53RecordSet}/${requestHandlerApiPath}/${jobStatusApiPath}',
            !Sub 'https://${WPSRestApi}.execute-api.${AWS::Region}.amazonaws.com/${wpsApiStage}/${requestHandlerApiPath}/${jobStatusApiPath}'
          ]
    DependsOn: S3PutConfigurationFiles
  JobStatusLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSBatchFullAccess
      Policies:
        - PolicyName: PublishVersion
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:PublishVersion
                Resource: '*'
        - PolicyName: S3Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub
                    - 'arn:aws:s3:::${BucketName}'
                    - { BucketName: !If [CreateEphemeralBucket, !Ref EphemeralS3Bucket, !FindInMap [EnvironmentMap, !Ref environment, BucketName]] }
                  - !Sub
                    - 'arn:aws:s3:::${BucketName}/*'
                    - { BucketName: !If [CreateEphemeralBucket, !Ref EphemeralS3Bucket, !FindInMap [EnvironmentMap, !Ref environment, BucketName]] }
  S3PutObjectLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: PublishVersion
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:PublishVersion
                Resource: '*'
        - PolicyName: S3Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:Put*
                Resource:
                  - !Sub
                    - 'arn:aws:s3:::${BucketName}'
                    - { BucketName: !If [CreateEphemeralBucket, !Ref EphemeralS3Bucket, !FindInMap [EnvironmentMap, !Ref environment, BucketName]] }
                  - !Sub
                    - 'arn:aws:s3:::${BucketName}/*'
                    - { BucketName: !If [CreateEphemeralBucket, !Ref EphemeralS3Bucket, !FindInMap [EnvironmentMap, !Ref environment, BucketName]] }
  S3PutObjectLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import os
          import boto3
          import mimetypes
          from urllib2 import urlopen, Request
          import cfnresponse

          responseData = {'Data': 'OK'}

          s3c = boto3.client('s3')
          target_bucket = os.getenv('BUCKET')
          config_location = os.getenv('CONFIG_LOCATION')
          filename_suffix = os.getenv('FILENAME_SUFFIX')
          http_prefix = os.getenv('HTTP_FILE_PREFIX')


          def handler(event, context):
             try:
                 if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                     for env_var in os.environ:
                         env_var_value = os.getenv(env_var)
                         print('Environment Variable {} : {}'.format(env_var, env_var_value))

                     for env_var in os.environ:
                         env_var_value = os.getenv(env_var)
                         filename = os.getenv('{}_{}'.format(env_var, filename_suffix))
                         if env_var.startswith(http_prefix) and not env_var.endswith(filename_suffix) and env_var_value != http_prefix:
                             put(filename, env_var_value)
                 return cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, 'S3PutObjectLambdaFunction')
             except Exception as e:
               print(e)
               return cfnresponse.send(event, context, cfnresponse.FAILED, responseData, 'S3PutObjectLambdaFunction')


          def put(filename, url):
              print('Downloading url : {}'.format(url))
              request = Request(url)
              response = urlopen(request)

              file_contents = response.read()
              fileType,fileEncoding = mimetypes.guess_type(filename)
              if fileType:
                  s3c.put_object(Bucket=target_bucket, ContentType=fileType, ACL='public-read', Key='{}{}'.format(config_location, filename), Body=file_contents)
              else:
                  s3c.put_object(Bucket=target_bucket, ACL='public-read', Key='{}{}'.format(config_location, filename), Body=file_contents)
              print('Downloaded url : {}'.format(url))
      Description: Used to put objects into S3.
      FunctionName: !Sub 'S3PutObject-${AWS::StackName}'
      Handler: index.handler
      Role: !GetAtt S3PutObjectLambdaFunctionRole.Arn
      Runtime: python2.7
      MemorySize: 256
      Timeout: 60
      Environment:
        Variables:
          BUCKET: !If [CreateEphemeralBucket, !Ref EphemeralS3Bucket, !FindInMap [EnvironmentMap, !Ref environment, BucketName]]
          CONFIG_LOCATION: !Ref s3configKey
          FILENAME_SUFFIX: FILENAME
          HTTP_FILE_PREFIX: HTTP_FILE
          HTTP_FILE_TEMPLATES: !Ref templatesURL
          HTTP_FILE_TEMPLATES_FILENAME: !FindInMap [ConfigurationFileMap, Filename, templates]
          HTTP_FILE_JOB_STATUS_CSS: !Ref aodnCssURL
          HTTP_FILE_JOB_STATUS_CSS_FILENAME: !FindInMap [ConfigurationFileMap, Filename, jobStatusCss]
          HTTP_FILE_BOOTSTRAP_CSS: !Ref bootstrapCssURL
          HTTP_FILE_BOOTSTRAP_CSS_FILENAME: !FindInMap [ConfigurationFileMap, Filename, bootstrapCss]
  S3PutConfigurationFiles:
    Type: Custom::S3PutObject
    Properties:
      ServiceToken: !GetAtt S3PutObjectLambdaFunction.Arn
      Version: !Ref version
  EmptyBucketLambdaFunction:
    Type: AWS::Lambda::Function
    Condition: CreateEphemeralBucket
    Properties:
      Code:
        ZipFile: |
          import os
          import boto3
          import cfnresponse

          def handler(event, context):
               try:
                   if event['RequestType'] == 'Delete':
                       s3 = boto3.resource('s3')
                       bucket = s3.Bucket(os.getenv('BUCKET'))
                       # bool to check if bucket is flagged as ephemeral before touching it
                       is_ephemeral = any([l for l in bucket.Tagging().tag_set if l['Key'] == 'EphemeralBucket' and l['Value'] == 'true'])

                       if not is_ephemeral:
                           raise Exception('Bucket is not ephemeral, will not delete')

                       print "Deleting"
                       bucket.objects.filter(Prefix=os.getenv('JOBS_KEY')).delete()
                       bucket.objects.filter(Prefix=os.getenv('CONFIG_KEY')).delete()
                   cfnresponse.send(event, context, cfnresponse.SUCCESS, {'Data': 'OK'}, 'EmptyBucketLambdaFunction')
               except Exception as e:
                  print(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Data': 'OK'}, 'EmptyBucketLambdaFunction')
      Description: Used to put objects into S3.
      FunctionName: !Sub 'EmptyBucket-${AWS::StackName}'
      Handler: index.handler
      Role: !GetAtt EmptyBucketLambdaFunctionRole.Arn
      Runtime: python2.7
      Timeout: 60
      Environment:
        Variables:
          BUCKET: !Ref EphemeralS3Bucket
          CONFIG_KEY: !Ref s3configKey
          JOBS_KEY: !Ref s3jobKey
  EmptyBucket:
    Type: Custom::EmptyBucket
    Condition: CreateEphemeralBucket
    Properties:
      ServiceToken: !GetAtt EmptyBucketLambdaFunction.Arn
  EmptyBucketLambdaFunctionRole:
      Type: AWS::IAM::Role
      Condition: CreateEphemeralBucket
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: /
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: PublishVersion
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:PublishVersion
                  Resource: '*'
          - PolicyName: S3Access
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - s3:Delete*
                    - s3:List*
                    - s3:Get*
                  Resource:
                    - !Sub 'arn:aws:s3:::${EphemeralS3Bucket}'
                    - !Sub 'arn:aws:s3:::${EphemeralS3Bucket}/*'
  SumoLogicLambdaFunction:
    Type: AWS::Lambda::Function
    Condition: ConfigureSumoLogic
    DependsOn: S3PutConfigurationFiles
    Properties:
      Code: ./sumologic-lambda.zip
      Description: Push batch logs to SumoLogic
      FunctionName: !Sub 'SumoLogic-WPS-${AWS::StackName}'
      Handler: index.handler
      Role: !GetAtt SumoLogicLambdaFunctionRole.Arn
      Runtime: nodejs4.3
      Timeout: 3
      Environment:
        Variables:
          SUMO_ENDPOINT: !Ref sumoEndpoint
  SumoLogicLambdaFunctionRole:
      Type: AWS::IAM::Role
      Condition: ConfigureSumoLogic
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: /
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  BatchJobLogsLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: ConfigureSumoLogic
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt SumoLogicLambdaFunction.Arn
      Principal: !Sub 'logs.${AWS::Region}.amazonaws.com'
      SourceArn: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/batch/job:*'
  BatchJobLogsSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: ConfigureSumoLogic
    DependsOn: BatchJobLogsLambdaPermission
    Properties:
      DestinationArn: !GetAtt SumoLogicLambdaFunction.Arn
      FilterPattern: '' # Will need to update the filter pattern or create a log stream. Currently all the batch job logs will be fetched.
      LogGroupName: /aws/batch/job
  RequestHandlerLogsLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: ConfigureSumoLogic
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt SumoLogicLambdaFunction.Arn
      Principal: !Sub 'logs.${AWS::Region}.amazonaws.com'
      SourceArn: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${RequestHandlerLogGroup}:*'
  RequestHandlerLambdaLogsSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: ConfigureSumoLogic
    DependsOn: RequestHandlerLogsLambdaPermission
    Properties:
      DestinationArn: !GetAtt SumoLogicLambdaFunction.Arn
      FilterPattern: ''
      LogGroupName: !Ref RequestHandlerLogGroup
  JobStatusLogsLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: ConfigureSumoLogic
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt SumoLogicLambdaFunction.Arn
      Principal: !Sub 'logs.${AWS::Region}.amazonaws.com'
      SourceArn: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${JobStatusLogGroup}:*'
  JobStatusLambdaLogsSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: ConfigureSumoLogic
    DependsOn: JobStatusLogsLambdaPermission
    Properties:
      DestinationArn: !GetAtt SumoLogicLambdaFunction.Arn
      FilterPattern: ''
      LogGroupName: !Ref JobStatusLogGroup
  JobStatusLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${JobStatusLambdaFunction}'
  RequestHandlerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${RequestHandlerLambdaFunction}'
Outputs:
  RequestHandlerApiGatewayUrl:
    Value: !If [
      CreateWpsApiGatewayDomainName,
      !Sub 'https://${WpsRoute53RecordSet}/${requestHandlerApiPath}',
      !Sub 'https://${WPSRestApi}.execute-api.${AWS::Region}.amazonaws.com/${wpsApiStage}/${requestHandlerApiPath}'
    ]
  JobStatusApiGatewayUrl:
    Value: !If [
      CreateWpsApiGatewayDomainName,
      !Sub 'https://${WpsRoute53RecordSet}/${requestHandlerApiPath}/${jobStatusApiPath}',
      !Sub 'https://${WPSRestApi}.execute-api.${AWS::Region}.amazonaws.com/${wpsApiStage}/${requestHandlerApiPath}/${jobStatusApiPath}'
    ]
  ComputeEnvironmentArn:
    Value: !Ref ComputeEnvironment
  JobQueueArn:
    Value: !Ref JobQueue
  JobDefinitionArn:
    Value: !Ref JobDefinition
