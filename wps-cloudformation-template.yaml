AWSTemplateFormatVersion: 2010-09-09
Description: >-
  A template for AWS-WPS
Parameters:
  securityGroup:
    Type: String
  subnets:
    Type: CommaDelimitedList
  s3LambdaCodeBucket:
    Type: String
    Default: imos-binary-frankfurt
  s3LambdaCodeKey:
    Type: String
  jobName:
    Type: String
    Default: 'javaduck'
  jobVCPUs:
    Type: String
    Default: '1'
  jobMemory:
    Type: String
    Default: '2000'
  maxVCPUs:
    Type: String
    Default: '4'
  geoserver:
    Type: String
  dockerImage:
    Type: String
  s3OutputBucket:
    Type: String
    Default: 'imos-test-data.aodn.org.au'
  s3StatusBucket:
    Type: String
    Default: 'imos-test-data.aodn.org.au'
  s3OutputFilename:
    Type: String
    Default: 'output.nc'
  s3StatusFilename:
    Type: String
    Default: 'status.xml'
  s3ConfigBucket:
    Type: String
    Default: 'wps-lambda-config'
  s3GetCapabilitiesTemplateBucket:
    Type: String
    Default: imos-binary-frankfurt
  s3GetCapabilitiesTemplatekey:
    Type: String
    Default: '$LATEST/GetCapabilities.ftl'
  s3DescribeProcessBucket:
    Type: String
    Default: imos-binary-frankfurt
  s3DescribeProcessKey:
    Type: String
    Default: '$LATEST/operations/'
  geoserverWpsEndpoint:
    Type: String
    Default: 'http://geoserver-wps.aodn.org.au/geoserver/wps'
Resources:
  BatchServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: batch.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 119037ec-2cef-4c76-bbea-9e62091e725d
  SpotIamFleetRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: spotfleet.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetRole'
  IamInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref EcsInstanceRole
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 65b9b65e-442f-4006-bffb-39aa71c5708c
  EcsInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 303fb35e-a959-48ec-a564-e36ae4902115
  JobInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        -
          PolicyName: "wps-job-s3-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "s3:*"
                Resource: [
                  !Join ["", ["arn:aws:s3:::", !Ref s3OutputBucket]],
                  !Join ["", ["arn:aws:s3:::", !Ref s3OutputBucket,"/*"]]
                ]
              -
                Effect: "Allow"
                Action: "s3:*"
                Resource: [
                  !Join ["", ["arn:aws:s3:::", !Ref s3StatusBucket]],
                  !Join ["", ["arn:aws:s3:::", !Ref s3StatusBucket,"/*"]]
                ]
              -
                Effect: "Allow"
                Action: ["s3:Get*", "s3:List*"]
                Resource: [
                  !Join ["", ["arn:aws:s3:::", !Ref s3ConfigBucket]],
                  !Join ["", ["arn:aws:s3:::", !Ref s3ConfigBucket,"/*"]]
                ]
  JobDefinition:
    Type: 'AWS::Batch::JobDefinition'
    Properties:
      Type: container
      JobDefinitionName: !Sub 'JavaDuckSmall1-${AWS::StackName}'
      ContainerProperties:
        Image: !Ref dockerImage
        Vcpus: !Ref jobVCPUs
        Memory: !Ref jobMemory
        JobRoleArn: !Ref JobInstanceRole
        Command:
          - 'Ref::layer'
          - 'Ref::subset'
          - 'Ref::result'
        Environment:
          -
            Name: "OUTPUT_S3_FILENAME"
            Value: !Ref s3OutputFilename
          -
            Name: "OUTPUT_S3_BUCKET"
            Value: !Ref s3ConfigBucket
          -
            Name: "STATUS_S3_BUCKET"
            Value: !Ref s3ConfigBucket
          -
            Name: "STATUS_S3_FILENAME"
            Value: !Ref s3StatusFilename
      RetryStrategy:
        Attempts: 2
    Metadata:
      'AWS::CloudFormation::Designer':
        id: f17c8aa4-8ab7-4ee1-b3a6-7a8727b8bff5
    DependsOn:  JobInstanceRole
  JobQueue:
    Type: 'AWS::Batch::JobQueue'
    Properties:
      JobQueueName: !Sub 'JavaDuckQueue1-${AWS::StackName}'
      Priority: 2
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref ComputeEnvironment
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 376a0983-1cf3-4145-bafe-96b0750be936
  ComputeEnvironment:
    Type: 'AWS::Batch::ComputeEnvironment'
    Properties:
      Type: MANAGED
      ComputeEnvironmentName: !Sub 'JavaDuckSpotComputeEnvironment1-${AWS::StackName}'
      ComputeResources:
        Type: SPOT
        MinvCpus: 0
        DesiredvCpus: 0
        MaxvCpus: !Ref maxVCPUs
        InstanceTypes:
          - optimal
        Subnets: !Ref subnets
        SecurityGroupIds:
          - !Ref securityGroup
        InstanceRole: !Ref IamInstanceProfile
        SpotIamFleetRole: !Ref SpotIamFleetRole
        BidPercentage: 20
      ServiceRole: !Ref BatchServiceRole
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 7a2b9b81-942a-4563-8b0a-7ed0cb6c6aad
  WPSApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Join ["",["WPS API-",!Ref  "AWS::StackName" ]]
      Description: API used for WPS requests
      FailOnWarnings: true
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt LambdaRequestHandler.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join ["", ["arn:aws:execute-api:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":", !Ref WPSApi, "/*"]]
  WPSApiStage:
    DependsOn:
      - ApiGatewayAccount
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiDeployment
      MethodSettings:
        -
          DataTraceEnabled: true
          HttpMethod: GET
          LoggingLevel: INFO
          ResourcePath: /*
      RestApiId: !Ref WPSApi
      StageName: LATEST
  ApiGatewayCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        -
          PolicyName: ApiGatewayLogsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:DescribeLogGroups'
                - 'logs:DescribeLogStreams'
                - 'logs:PutLogEvents'
                - 'logs:GetLogEvents'
                - 'logs:FilterLogEvent'
              Resource: '*'
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchLogsRole.Arn
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - WPSRequest
    Properties:
      RestApiId: !Ref WPSApi
      StageName: DummyStage
  WPSResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref WPSApi
      ParentId: !GetAtt WPSApi.RootResourceId
      PathPart: wps
  WPSRequest:
    DependsOn: LambdaPermission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: ANY
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join ["",
          ["arn:aws:apigateway:", !Ref "AWS::Region", ":lambda:path/2015-03-31/functions/", !GetAtt LambdaRequestHandler.Arn, "/invocations"]
        ]
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref WPSResource
      RestApiId: !Ref WPSApi
      MethodResponses:
        - StatusCode: 200
  LambdaRequestHandler:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Make a wps request
      FunctionName: !Sub 'wps-request-handler-${AWS::StackName}'
      Handler: 'au.org.aodn.aws.wps.lambda.WpsLambdaRequestHandler'
      MemorySize: 512
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: java8
      Timeout: 60
      Code:
        S3Bucket: !Ref s3LambdaCodeBucket
        S3Key: !Ref s3LambdaCodeKey
      Environment:
        Variables:
          AWS_BATCH_JOB_NAME: !Ref jobName
          AWS_BATCH_JOB_QUEUE_NAME: !Ref JobQueue
          STATUS_S3_BUCKET: !Ref s3ConfigBucket
          STATUS_S3_FILENAME: !Ref s3StatusFilename
          GET_CAPABILITIES_TEMPLATE_S3_BUCKET: !Ref s3GetCapabilitiesTemplateBucket
          GET_CAPABILITIES_TEMPLATE_S3_KEY: !Ref s3GetCapabilitiesTemplatekey
          DESCRIBE_PROCESS_S3_BUCKET: !Ref s3DescribeProcessBucket
          DESCRIBE_PROCESS_S3_KEY_PREFIX: !Ref s3DescribeProcessKey
          GEOSERVER_WPS_ENDPOINT_URL: !Ref geoserverWpsEndpoint
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 2f9d630f-4908-418a-9455-e9b730d0c673
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSBatchFullAccess'
      Policies:
        - PolicyName: PublishVersion
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:PublishVersion'
                Resource: '*'
        - PolicyName: S3Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: "Allow"
                Action: "s3:*"
                Resource: [
                  !Join ["", ["arn:aws:s3:::", !Ref s3StatusBucket]],
                  !Join ["", ["arn:aws:s3:::", !Ref s3StatusBucket,"/*"]]
                ]
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 5a6cf0c9-ebd3-41f0-8b4c-009af363b85b
Outputs:
  ComputeEnvironmentArn:
    Value: !Ref ComputeEnvironment
  JobQueueArn:
    Value: !Ref JobQueue
  JobDefinitionArn:
    Value: !Ref JobDefinition
Metadata:
  'AWS::CloudFormation::Designer':
    f17c8aa4-8ab7-4ee1-b3a6-7a8727b8bff5:
      size:
        width: 60
        height: 60
      position:
        x: 60
        'y': 660
      z: 1
      embeds: []
    303fb35e-a959-48ec-a564-e36ae4902115:
      size:
        width: 60
        height: 60
      position:
        x: 180
        'y': 660
      z: 1
      embeds: []
    65b9b65e-442f-4006-bffb-39aa71c5708c:
      size:
        width: 60
        height: 60
      position:
        x: 300
        'y': 660
      z: 1
      embeds: []
      isassociatedwith:
        - 303fb35e-a959-48ec-a564-e36ae4902115
    119037ec-2cef-4c76-bbea-9e62091e725d:
      size:
        width: 60
        height: 60
      position:
        x: 420
        'y': 660
      z: 1
      embeds: []
    d3ba16c5-0aeb-466c-8178-faca02f99c1a:
      size:
        width: 60
        height: 60
      position:
        x: 540
        'y': 390
      z: 1
      embeds: []
    4bc5138a-265b-4dfa-9d1e-9f9efad6ef93:
      size:
        width: 600
        height: 510
      position:
        x: 60
        'y': 90
      z: 1
      embeds:
        - ec8b2cb0-b28c-4d69-bf68-486d10499b6f
    ec8b2cb0-b28c-4d69-bf68-486d10499b6f:
      size:
        width: 60
        height: 60
      position:
        x: 390
        'y': 360
      z: 2
      parent: 4bc5138a-265b-4dfa-9d1e-9f9efad6ef93
      embeds: []
    7a2b9b81-942a-4563-8b0a-7ed0cb6c6aad:
      size:
        width: 60
        height: 60
      position:
        x: 660
        'y': 660
      z: 1
      embeds: []
      isrelatedto:
        - a41bc925-27c0-4347-893d-3de5628f24f5
        - ec8b2cb0-b28c-4d69-bf68-486d10499b6f
        - 65b9b65e-442f-4006-bffb-39aa71c5708c
        - 119037ec-2cef-4c76-bbea-9e62091e725d
    376a0983-1cf3-4145-bafe-96b0750be936:
      size:
        width: 60
        height: 60
      position:
        x: 660
        'y': 570
      z: 1
      embeds: []
      isrelatedto:
        - 7a2b9b81-942a-4563-8b0a-7ed0cb6c6aad
    49a7ceae-b82e-44c7-851b-3a0590c37a44:
      source:
        id: d3ba16c5-0aeb-466c-8178-faca02f99c1a
      target:
        id: 4bc5138a-265b-4dfa-9d1e-9f9efad6ef93
    2f9d630f-4908-418a-9455-e9b730d0c673:
      size:
        width: 60
        height: 60
      position:
        x: 330
        'y': 390
      z: 1
      embeds: []
      isrelatedto:
        - 5a6cf0c9-ebd3-41f0-8b4c-009af363b85b
    5a6cf0c9-ebd3-41f0-8b4c-009af363b85b:
      size:
        width: 60
        height: 60
      position:
        x: 320
        'y': 260
      z: 1
      embeds: []
